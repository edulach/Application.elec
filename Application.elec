  #### Set the path of files ####
  setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
  require(rstan)
  library(compositions)
  library(Hmisc, pos=4)
  library(foreign, pos=4)
  library(corrplot)
  library(ggplot2)
  library(readxl)
  #### Functions ###s#
  source("aux.functions.elec.R") 
  list.files()
 
  #1. Collecting multiparty votes
  ####Dataset####
  data = read.table("Brasil_votes_2022.txt", header = T)
  rownames(data) <- data[,1]
  data <- data[, -1]
  data
  
  #sum(data[,6])
  #2. Transforming votes into proportions 
  data_prop = prop_trans(data)
  
  #3. Log-ratio transformation
  data_clr = clr_trans(data_prop)
  data_clr

  
  
  
  #4. Principal component analysis 
  PCA_clr =PCA_clr_pr(data_clr)
  PCA_clr$loadings
  PCA_clr$scores
  PCA_clr$explained_variance

  #5. Identify scores
  scores<-extract_scores(PCA_clr)
  scores
  
  #6. Transforming scores (factors)
  scores_tr<-trans_scores(scores)
  scores_tr
  summary(scores_tr)
  
  #7. Explanatory variables 
  idhdata = read.table("idhperu.txt", header = T)
  idhdata
  
  #8. Bounded regression model:Bayesian approach
  #### STAN models ####
  #setwd(dirname(rstudioapi::getActiveDocumentContext()$path))

  
  stanmodels <- c("stan_null.stan","stan_location.stan","stan_precision.stan","stan_full.stan")
  
  responses <- colnames(scores_tr)
  fit_list <- list()
  summary_results <- list()
  waic_loo_results <- list()  # Store WAIC & LOOIC values
  #scores_tr[,1]
  for (resp in responses) {
    cat("\nRunning models for response:", resp, "\n")
    
    dat_stan <- list(
      N = nrow(data),
      X = idhdata,
      K = ncol(idhdata),
      y = scores_tr[,resp]
    )
    
    for (i in seq_along(stanmodels)) {
      cat("\nRunning Model:", stanmodels[i], "\n")
      
      # Fit the model
      fit <- stan(file = stanmodels[i], data = dat_stan, iter = 5000, chains = 1, seed = 1234)
      log_lik_matrix <- extract(fit, "log_lik")$log_lik
      eaic_values <- extract(fit, "EAIC")$EAIC
      ebic_values <- extract(fit, "EBIC")$EBIC
      
      # Compute mean EAIC and EBIC
      mean_eaic <- mean(eaic_values)
      mean_ebic <- mean(ebic_values)
      
      # Extract summary
      stan_summary <- summary(fit)$summary
      summary_results[[paste(resp, stanmodels[i], sep = "_")]] <- stan_summary
      
  
      waic_value <- loo::waic(log_lik_matrix)$estimates[3, 1]  # Extract WAIC
      looic_value <- loo::loo(log_lik_matrix)$estimates[3, 1]  # Extract LOOIC
      
      waic_loo_results[[paste(resp, stanmodels[i], sep = "_")]] <- list(
        WAIC = waic_value,
        LOOIC = looic_value,
        EAIC = mean_eaic,
        EBIC = mean_ebic
      )
      file_name <- paste0("summary_", resp, "_", tools::file_path_sans_ext(basename(stanmodels[i])), ".txt")
      
      writeLines(capture.output({
        cat("Summary Results:\n")
        print(stan_summary)
        cat("\nWAIC and LOOIC Results:\n")
        cat("WAIC:", waic_value, "\n")
        cat("LOOIC:", looic_value, "\n")
        cat("EAIC:", mean_eaic, "\n")
        cat("EBIC:", mean_ebic, "\n")
      }), file_name)
      
      fit_list[[paste(resp, stanmodels[i], sep = "_")]] <- fit
    }
  }
  
  # Print all results
  cat("\nSummary Results:\n")
  print(summary_results)
  
  cat("\nWAIC and LOOIC Results:\n")
  print(waic_loo_results)
  
  


  

